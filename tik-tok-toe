import tkinter as tk
from tkinter import font, messagebox, simpledialog
from itertools import cycle
import random
import json
import os

class Leaderboard:
    def __init__(self, filename='leaderboard.json'):
        self.filename = filename
        self.leaderboard = []
        self.load_leaderboard()

    def load_leaderboard(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as f:
                self.leaderboard = json.load(f)

    def save_leaderboard(self):
        with open(self.filename, 'w') as f:
            json.dump(self.leaderboard, f, indent=2)

    def add_score(self, player_name, score):
        self.leaderboard.append({
            'name': player_name,
            'score': score
        })
        self.leaderboard.sort(key=lambda x: x['score'], reverse=True)
        self.leaderboard = self.leaderboard[:10]
        self.save_leaderboard()

    def get_leaderboard(self):
        return self.leaderboard

class Player:
    def __init__(self, label, color):
        self.label = label
        self.color = color
        self.wins = 0
        self.name = f"Player {label}"

class Move:
    def __init__(self, row, col, label=""):
        self.row = row
        self.col = col
        self.label = label

class TicTacToeGame:
    def __init__(self, players=None, board_size=3):
        if players is None:
            players = [Player("X", "red"), Player("O", "green")]
        self.original_players = players
        self.players = cycle(players)
        self.board_size = board_size
        self.current_player = next(self.players)
        self._has_winner = False
        self._current_moves = [
            [Move(row, col) for col in range(self.board_size)]
            for row in range(self.board_size)
        ]
        self._winning_combos = self._get_winning_combos()

    def _get_winning_combos(self):
        rows = [
            [(move.row, move.col) for move in row]
            for row in self._current_moves
        ]
        columns = [list(col) for col in zip(*rows)]
        first_diagonal = [row[i] for i, row in enumerate(rows)]
        second_diagonal = [col[j] for j, col in enumerate(reversed(columns))]
        return rows + columns + [first_diagonal, second_diagonal]

    def reset_game(self):
        self.players = cycle(self.original_players)
        self.current_player = next(self.players)
        self._has_winner = False
        self._current_moves = [
            [Move(row, col) for col in range(self.board_size)]
            for row in range(self.board_size)
        ]
        self._winning_combos = self._get_winning_combos()

    def is_valid_move(self, move):
        row, col = move.row, move.col
        move_was_not_played = self._current_moves[row][col].label == ""
        no_winner = not self._has_winner
        return no_winner and move_was_not_played

    def process_move(self, move):
        row, col = move.row, move.col
        self._current_moves[row][col] = move
        for combo in self._winning_combos:
            results = set(self._current_moves[n][m].label for n, m in combo)
            is_win = (len(results) == 1) and ("" not in results)
            if is_win:
                self._has_winner = True
                for player in self.original_players:
                    if player.label == move.label:
                        player.wins += 1
                        break
                break

    def has_winner(self):
        return self._has_winner

    def is_tied(self):
        no_winner = not self._has_winner
        played_moves = (move.label for row in self._current_moves for move in row)
        return no_winner and all(played_moves)

    def toggle_player(self):
        self.current_player = next(self.players)

    def ai_move(self):
        for row in range(3):
            for col in range(3):
                if self._current_moves[row][col].label == "":
                    self._current_moves[row][col].label = "O"
                    if self.has_winner():
                        self._current_moves[row][col].label = ""
                        return Move(row, col, "O")
                    self._current_moves[row][col].label = ""
        
        for row in range(3):
            for col in range(3):
                if self._current_moves[row][col].label == "":
                    self._current_moves[row][col].label = "X"
                    if self.has_winner():
                        self._current_moves[row][col].label = ""
                        return Move(row, col, "O")
                    self._current_moves[row][col].label = ""
        
        if self._current_moves[1][1].label == "":
            return Move(1, 1, "O")
        
        corners = [(0,0), (0,2), (2,0), (2,2)]
        random.shuffle(corners)
        for row, col in corners:
            if self._current_moves[row][col].label == "":
                return Move(row, col, "O")
        
        empty_cells = [
            (row, col)
            for row in range(3)
            for col in range(3)
            if self._current_moves[row][col].label == ""
        ]
        if empty_cells:
            row, col = random.choice(empty_cells)
            return Move(row, col, "O")
        
        return None

class HomePage(tk.Toplevel):
    def __init__(self, master=None):
        super().__init__(master)
        self.title("Tic-Tac-Toe - Main Menu")
        self.geometry("400x300")
        self.resizable(False, False)
        
        container = tk.Frame(self)
        container.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)
        
        tk.Label(container, 
                text="Tic-Tac-Toe", 
                font=font.Font(size=24, weight='bold')).pack(pady=10)
        
        btn_frame = tk.Frame(container)
        btn_frame.pack(pady=20)
        
        tk.Button(btn_frame, 
                text="Player vs AI", 
                command=lambda: self.start_game(True),
                width=15,
                font=font.Font(size=12)).pack(pady=5)
        
        tk.Button(btn_frame, 
                text="Player vs Player", 
                command=lambda: self.start_game(False),
                width=15,
                font=font.Font(size=12)).pack(pady=5)
        
        tk.Button(btn_frame, 
                text="Leaderboard", 
                command=self.show_leaderboard,
                width=15,
                font=font.Font(size=12)).pack(pady=5)
        
        tk.Button(btn_frame, 
                text="Exit", 
                command=self.quit_game,
                width=15,
                font=font.Font(size=12)).pack(pady=5)
    
    def start_game(self, ai_mode):
        self.withdraw()
        game_window = GameWindow(self, ai_mode)
        game_window.mainloop()
    
    def show_leaderboard(self):
        leaderboard_window = tk.Toplevel(self)
        leaderboard_window.title("Leaderboard")
        leaderboard_window.geometry("300x400")
        
        scores = Leaderboard().get_leaderboard()
        
        tk.Label(leaderboard_window, 
                text="Top Scores - Player vs AI",
                font=font.Font(size=14, weight='bold')).pack(pady=10)
        
        if not scores:
            tk.Label(leaderboard_window, text="No scores yet!").pack()
        else:
            for i, entry in enumerate(scores, 1):
                tk.Label(leaderboard_window,
                       text=f"{i}. {entry['name']}: {entry['score']} wins",
                       font=font.Font(size=12)).pack(pady=2)
    
    def quit_game(self):
        self.master.destroy() if self.master else self.destroy()
    
    def return_to_home(self):
        self.deiconify()

class GameWindow(tk.Tk):
    def __init__(self, master, ai_mode):
        super().__init__()
        self.title("Tic-Tac-Toe Game")
        self._buttons = {}  # Dictionary to track buttons by (row,col)
        self.ties = 0
        self.leaderboard = Leaderboard()
        self._ai_mode = ai_mode
        self.home_page = master
        
        self.target_score = 5
        self.series_scores = {"Player X": 0, "Player O": 0}
        
        self._game = TicTacToeGame()
        self._get_player_names()
        self._setup_target_score()
        self._setup_ui()
        self._update_display(f"{self._game.current_player.name}'s turn ({self._game.current_player.label})")
        
        self.protocol("WM_DELETE_WINDOW", self._on_close)
    
    def _on_close(self):
        self.destroy()
        self.home_page.return_to_home()
    
    def _get_player_names(self):
        human_player = self._game.original_players[0]
        human_player.name = simpledialog.askstring(
            "Player Name", 
            "Enter your name:",
            parent=self
        ) or "Player 1"
        
        if self._ai_mode:
            self._game.original_players[1].name = "Computer"
        else:
            friend_name = simpledialog.askstring(
                "Friend's Name", 
                "Enter friend's name:",
                parent=self
            ) or "Player 2"
            self._game.original_players[1].name = friend_name
        
        self.series_scores = {
            self._game.original_players[0].name: 0,
            self._game.original_players[1].name: 0
        }

    def _setup_target_score(self):
        self.target_score = simpledialog.askinteger(
            "Target Score",
            "First to how many wins?",
            parent=self,
            minvalue=1,
            maxvalue=10,
            initialvalue=5
        ) or 5

    def _setup_ui(self):
        top_bar = tk.Frame(self)
        top_bar.pack(fill=tk.X, padx=10, pady=5)
        
        if self._ai_mode:
            tk.Button(
                top_bar,
                text="Leaderboard",
                command=self.show_leaderboard,
                font=font.Font(size=10)
            ).pack(side=tk.RIGHT)
        
        self.series_display = tk.Label(
            self,
            text=f"First to {self.target_score} wins",
            font=font.Font(size=12),
            pady=5
        )
        self.series_display.pack()
        
        self.display = tk.Label(
            self,
            text="Ready?",
            font=font.Font(size=16, weight="bold"),
            pady=10
        )
        self.display.pack()
        
        self.score_display = tk.Label(
            self,
            text="",
            font=font.Font(size=12),
            pady=5
        )
        self._update_scores()

        grid_frame = tk.Frame(self)
        grid_frame.pack(pady=10)
        
        for row in range(3):
            for col in range(3):
                button = tk.Button(
                    grid_frame,
                    text="",
                    font=font.Font(size=36, weight="bold"),
                    fg="black",
                    width=3,
                    height=1,
                    highlightbackground="lightblue",
                )
                self._buttons[(row, col)] = button
                button.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                button.bind("<ButtonPress-1>", lambda e, r=row, c=col: self.play(r, c))

        menu_bar = tk.Menu(self)
        self.config(menu=menu_bar)
        game_menu = tk.Menu(menu_bar, tearoff=0)
        game_menu.add_command(label="New Game", command=self.reset_board)
        game_menu.add_command(label="New Series", command=self.new_series)
        game_menu.add_command(label="Change Target", command=self.change_target_score)
        game_menu.add_command(label="Switch Mode", command=self.switch_modes)
        game_menu.add_separator()
        game_menu.add_command(label="Main Menu", command=self.return_to_main_menu)
        game_menu.add_command(label="Exit", command=self.destroy)
        menu_bar.add_cascade(label="Game", menu=game_menu)

    def play(self, row, col):
        button = self._buttons.get((row, col))
        if not button or not button.winfo_exists():
            return
            
        move = Move(row, col, self._game.current_player.label)
        if self._game.is_valid_move(move):
            button.config(text=self._game.current_player.label, fg=self._game.current_player.color)
            self._game.process_move(move)
            
            if self._game.is_tied():
                self.ties += 1
                self._update_display("Game Tied!", "red")
                self._update_scores()
                self._handle_series_progress()
            elif self._game.has_winner():
                self._highlight_cells()
                winner = self._game.current_player
                self.series_scores[winner.name] += 1
                
                msg = f'{winner.name} ({winner.label}) wins!'
                color = winner.color
                self._update_display(msg, color)
                self._update_scores()
                self._handle_series_progress()
            else:
                self._game.toggle_player()
                msg = f"{self._game.current_player.name}'s turn ({self._game.current_player.label})"
                self._update_display(msg)
                if self._ai_mode and self._game.current_player.label == "O":
                    self.after(300, self.ai_move)

    def _handle_series_progress(self):
        winner = self._game.current_player
        other_player = next(p for p in self._game.original_players if p != winner)
        
        if self.series_scores[winner.name] >= self.target_score:
            msg = (f"{winner.name} wins the series {self.series_scores[winner.name]}"
                  f" to {self.series_scores[other_player.name]}!")
            messagebox.showinfo("Series Winner", msg)
            
            if self._ai_mode and winner.label == "X":
                self.leaderboard.add_score(winner.name, self.series_scores[winner.name])
            
            self.new_series()
        else:
            self.after(1500, self.reset_board)

    def ai_move(self):
        ai_move = self._game.ai_move()
        if ai_move is None:
            return
            
        button = self._buttons.get((ai_move.row, ai_move.col))
        if button and button.winfo_exists():
            button.config(text="O", fg=self._game.original_players[1].color)
            self._game.process_move(ai_move)
            
            if self._game.is_tied():
                self.ties += 1
                self._update_display("Game Tied!", "red")
                self._update_scores()
                self._handle_series_progress()
            elif self._game.has_winner():
                self._highlight_cells()
                winner = self._game.current_player
                self.series_scores[winner.name] += 1
                
                msg = f'{winner.name} ({winner.label}) wins!'
                color = winner.color
                self._update_display(msg, color)
                self._update_scores()
                self._handle_series_progress()
            else:
                self._game.toggle_player()
                self._update_display(f"{self._game.current_player.name}'s turn ({self._game.current_player.label})")

    def _update_display(self, msg, color="black"):
        self.display["text"] = msg
        self.display["fg"] = color
        
    def _update_scores(self):
        player_x = next(p for p in self._game.original_players if p.label == "X")
        player_o = next(p for p in self._game.original_players if p.label == "O")
        
        game_score = f"Game: {player_x.name} (X): {player_x.wins}  |  {player_o.name} (O): {player_o.wins}  |  Ties: {self.ties}"
        series_score = (f"Series: {player_x.name} {self.series_scores[player_x.name]} - "
                      f"{self.series_scores[player_o.name]} {player_o.name} (First to {self.target_score})")
        
        self.score_display["text"] = f"{game_score}\n{series_score}"

    def _highlight_cells(self):
        for (row, col), button in self._buttons.items():
            if button.winfo_exists():
                button.config(highlightbackground="lightblue")
                for combo in self._game._winning_combos:
                    if (row, col) in combo:
                        button.config(highlightbackground="red")

    def show_leaderboard(self):
        leaderboard_window = tk.Toplevel(self)
        leaderboard_window.title("Leaderboard - Player vs AI")
        
        scores = self.leaderboard.get_leaderboard()
        
        tk.Label(leaderboard_window, 
                text="Top Scores - Player vs AI",
                font=font.Font(size=14, weight='bold')).pack(pady=10)
        
        if not scores:
            tk.Label(leaderboard_window, text="No scores yet!").pack()
        else:
            for i, entry in enumerate(scores, 1):
                tk.Label(leaderboard_window,
                       text=f"{i}. {entry['name']}: {entry['score']} wins",
                       font=font.Font(size=12)).pack(pady=2)

    def new_series(self):
        if messagebox.askyesno("New Series", "Start a new series?"):
            self._setup_target_score()
            self.series_scores = {
                self._game.original_players[0].name: 0,
                self._game.original_players[1].name: 0
            }
            self._game.original_players[0].wins = 0
            self._game.original_players[1].wins = 0
            self.ties = 0
            self.reset_board()
        else:
            self.return_to_main_menu()

    def change_target_score(self):
        new_target = simpledialog.askinteger(
            "Change Target Score",
            f"Current target: {self.target_score}\nNew target:",
            parent=self,
            minvalue=1,
            maxvalue=10,
            initialvalue=self.target_score
        )
        if new_target and new_target != self.target_score:
            self.target_score = new_target
            self.series_display.config(text=f"First to {self.target_score} wins")
            self._update_scores()

    def switch_modes(self):
        if messagebox.askyesno("Switch Mode", "Switch game modes? This will end current series."):
            self._ai_mode = not self._ai_mode
            self._get_player_names()
            self.new_series()

    def return_to_main_menu(self):
        self.destroy()
        self.home_page.return_to_home()

    def reset_board(self):
        self._game.reset_game()
        self._update_display(f"{self._game.current_player.name}'s turn ({self._game.current_player.label})")
        self._update_scores()
        
        for (row, col), button in self._buttons.items():
            if button.winfo_exists():
                button.config(
                    highlightbackground="lightblue",
                    text="",
                    fg="black"
                )
        
        if self._ai_mode and self._game.current_player.label == "O":
            self.after(300, self.ai_move)

def main():
    root = tk.Tk()
    root.withdraw()
    
    home_page = HomePage(root)
    home_page.mainloop()

if __name__ == "__main__":
    main()
